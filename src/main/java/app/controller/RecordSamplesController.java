package app.controller;

import app.domain.model.Company;
import app.domain.model.MyBarcode;
import app.domain.model.Sample;
import app.domain.model.Test;
import app.domain.interfaces.ExternalAPI;
import app.domain.shared.utils.BarcodeUtils;
import app.domain.store.ClinicalAnalysisLaboratoryStore;
import app.domain.store.SampleStore;
import app.domain.store.TestStore;
import app.mappers.TestMapper;
import app.mappers.dto.TestDTO;
import net.sourceforge.barbecue.BarcodeException;
import net.sourceforge.barbecue.output.OutputException;


import java.io.IOException;
import java.util.List;

/**Controller class for Record the Samples Collected in the Scope of a Given Test.
 *
 *  @author Ana Albergaria
 *
 */
public class RecordSamplesController {
    /**
     * The company associated to the Controller.
     */
    private Company company;

    /**
     * The sample associated to the Controller.
     */
    private Sample sample;

    /**
     * The Test for which the samples will be collected.
     */
    private Test selectedTest;

    /**
     * Builds an empty constructor for having the actual instance of the company when instantiated.
     */
    public RecordSamplesController() {
        this(App.getInstance().getCompany());
    }

    /**
     * Builds a Record Samples Controller's instance receiving the company.
     *
     * @param company company associated to the Controller.
     */
    public RecordSamplesController(Company company) {
        this.company = company;
        this.sample = null;
    }

    /**
     * Calling method to create a new Sample
     * @return true if the new Sample was successfully created.
     *          Otherwise, it returns false.
     * @throws ClassNotFoundException if the class name of the external API is not found
     * @throws InstantiationException if the class object of the external API cannot be instantiated
     * @throws BarcodeException  if the data to be encoded in the barcode is invalid
     * @throws IllegalAccessException if there's a method invoked does not have access to the class representing the API
     */
    public boolean createSample() throws ClassNotFoundException, InstantiationException, BarcodeException, IllegalAccessException {
        MyBarcode myBarcode = getBarcode();
        SampleStore sampleStore = this.company.getSampleStore();
        this.sample = sampleStore.createSample(myBarcode);
        return sampleStore.validateSample(sample);
    }


    /**
     * Calling method to add a Sample to the selected Test by the Medical Lab Technician,
     * receiving the code of the selected test by parameter.
     *
     * @param code the code of the selected test
     * @return true if the Sample was successfully added to the test.
     *          Otherwise, it returns false.
     * @throws ClassNotFoundException if the class name of the external API is not found
     * @throws InstantiationException if the class object of the external API cannot be instantiated
     * @throws BarcodeException  if the data to be encoded in the barcode is invalid
     * @throws IllegalAccessException if there's a method invoked does not have access to the class representing the API
     */
    public boolean addSample(String code) throws ClassNotFoundException, InstantiationException, IllegalAccessException, BarcodeException {
        TestStore testStore = this.company.getTestStore();
        this.selectedTest = testStore.getTestByCodeInTestList(code);
        return selectedTest.addSample(sample);
    }

    /**
     * Calling method to get the list of Tests with no Samples Collected available in the system.
     * It makes use of a mapper to transform said list to DTO to reduce coupling.
     *
     * @return a List<TestDTO> if the list was successfully received.
     */
    public List<TestDTO> getTestsNoSamples(String laboratoryID) {
        TestStore testStore = this.company.getTestStore();
        List<Test> listTestsNoSamples = testStore.getTestsWithNoSamples(laboratoryID);

        TestMapper mapper = new TestMapper();
        return mapper.toDTO(listTestsNoSamples);
    }

    /**
     * Gets an instance of the class MyBarcode containing a generated barcode number
     * as well as the barcode generated by the external API.
     *
     * @return an instance of MyBarcode if the MyBarcode instance was successfully created.
     *
     * @throws IllegalAccessException if there's a method invoked does not have access to the class representing the API
     * @throws ClassNotFoundException if the class name of the external API is not found
     * @throws InstantiationException if the class object of the external API cannot be instantiated
     * @throws BarcodeException if the data to be encoded in the barcode is invalid
     */
    public MyBarcode getBarcode() throws IllegalAccessException, ClassNotFoundException, InstantiationException, BarcodeException {
        ExternalAPI api = this.company.getExternalAPI();
        String barcodeNumber = BarcodeUtils.generateBarcodeNumber();
        return api.getBarcode(barcodeNumber);
    }

    /**
     * Saves an image of the barcode of a certain Sample,
     * receiving the code of the selected test by parameter in order to create a subfolder
     * whose name contains the code.
     *
     * @param code code the code of the selected test
     * @throws IllegalAccessException if there's a method invoked does not have access to the class representing the API
     * @throws ClassNotFoundException if the class name of the external API is not found
     * @throws InstantiationException if the class object of the external API cannot be instantiated
     * @throws IOException if some sort of I/O exception has occurred
     * @throws OutputException if an exception is thrown by the Output service
     */
    public void saveImageBarcode(String code) throws IllegalAccessException, ClassNotFoundException, InstantiationException, IOException, OutputException {
        ExternalAPI api = this.company.getExternalAPI();
        MyBarcode myBarcode = this.sample.getMyBarcode();
        api.saveImageBarcode(myBarcode, code);
    }

    /**
     * Calling method to add the Sample Collecting Date to the Selected Test.
     */
    public void addSampleCollectionDateToTest() {
        this.selectedTest.addSampleCollectionDate();
    }


}
