@startuml
autonumber
'hide footbox
actor "Administrator" as ADM

participant ":RegisterEmployeeUI" as UI
participant ":RegisterEmployeeController" as CTRL
/'participant "ApplicationPOT" as _APP
participant "app\n:ApplicationPOT" as APP
participant "session\n:UserSession" as SESSAO'/
/'participant ":Platform" as PLAT'/
participant "Company" as ORG
participant ":RolesMapper" as ROLES_MAPPER
participant "IRoles\n: List<OrgRole>" as LIST_ORG_ROLE
participant "IRolesDto\n: List<OrgRoleDto>" as LIST_ORGROLE_DTO
participant "empDto\n: EmployeeDto" as EMP_DTO
/'participant "emp\n:Receptionist" as RECEPTIONIST
participant "emp\n:Doctor" as DOCTOR'/
participant "emp\n:Employee" as EMPLOYEE
participant "role\n:OrgRole"
participant "auth\n: AuthFacade" as AUTH
/'participant "cat\n:Category" as CAT
participant "lc\n:List<Category>" as LIST_CAT'/

activate ADM
ADM -> UI : starts registering a new employee
activate UI

UI -> CTRL : IRolesDto = getRoles()
activate CTRL

CTRL -> ORG : IRoles = getRoles()
activate ORG
deactivate ORG

CTRL -> ROLES_MAPPER : IRolesDto = toDTO(IRoles)
activate ROLES_MAPPER
deactivate ROLES_MAPPER

deactivate CTRL

UI --> ADM : asks to select the employee role
deactivate UI

ADM -> UI : selects the intended role
activate UI

/'UI -> CTRL : lc=getTaskCategories()
activate CTRL'/

/'CTRL -> PLAT : lc=getTaskCategories()
activate PLAT
|||
deactivate PLAT
deactivate CTRL'/

UI --> ADM : requests data (employeeId, organizationRole, name, address, \nphoneNumber, email, socCode, DoctorIndexNumber)
/'deactivate PLAT'/
deactivate UI

ADM -> UI : types requested data
activate UI

UI -> CTRL : createEmployee(empDto)
activate CTRL

/'
CTRL -> PLAT : cat=getCategoryById(categoryId)
activate PLAT
|||
deactivate PLAT'/
/'
CTRL -> _APP: app = getInstance()
activate _APP
|||
deactivate _APP

CTRL -> APP: session = getCurrentSession()
activate APP
|||
deactivate APP

CTRL -> SESSAO: email = getUserEmail()
activate SESSAO
|||
deactivate SESSAO

CTRL -> PLAT: org = getOrganizationByUserEmail(email)
activate PLAT
|||
deactivate PLAT'/

note over CTRL, ORG
empDto has all required data, including the "id" of the selected role
end note
CTRL -> ORG: emp = createEmployee(empDto)
activate ORG

ORG -> EMP_DTO : roleId = getRoledId()
activate EMP_DTO
deactivate EMP_DTO

ORG -> ORG : role = getRoleById(roleId)
activate ORG
deactivate ORG

ORG -> EMP_DTO : getEmployeeId()
activate EMP_DTO
deactivate EMP_DTO

ORG -> EMP_DTO : getName()
activate EMP_DTO
deactivate EMP_DTO

ORG -> EMP_DTO : getAddress()
activate EMP_DTO
deactivate EMP_DTO

ORG -> EMP_DTO : getPhoneNumber()
activate EMP_DTO
deactivate EMP_DTO

ORG -> EMP_DTO : getEmail()
activate EMP_DTO
deactivate EMP_DTO

ORG -> EMP_DTO : getSocCode()
activate EMP_DTO
deactivate EMP_DTO


ORG --> EMPLOYEE**: create(role, employeeId, name, address, \nphoneNumber, email, socCode)
/'ORG -> ORG: validateTask(task)'/
note over EMPLOYEE
**emp** might be an instance of __Employee__ or of __SpecialistDoctor__.
It depends of the **role** object receiving this message.

**Important**: An instance of __Specialist Doctor__ will have the extra attribute:
DoctorIndexNumber.
end note

note over ORG
end note

/'PODIA COMENTAR'/
/'CTRL --> UI: result'/

UI --> ADM: shows all data and requests confirmation
deactivate ORG
/'deactivate PLAT'/
deactivate CTRL
deactivate UI

ADM -> UI : confirms the data
activate UI
UI -> CTRL : saveEmployee()
activate CTRL

CTRL -> ORG : saveEmployee(emp)
activate ORG

ORG -> ORG: validateEmployee(emp)
ORG -> ORG: addEmployee(emp)

CTRL -> ORG : makeEmployeeAnUserAndSendPassword(emp)
ORG -> AUTH: addUserWithRole(name, email, generatedPassword)
activate AUTH
deactivate AUTH

CTRL -> CTRL : sendPassword()
activate CTRL
deactivate CTRL

/'PODIA COMENTAR'/
/'CTRL --> UI: result'/

UI --> ADM : informs operation success
deactivate ORG
deactivate CTRL
deactivate UI

deactivate ADM

@enduml